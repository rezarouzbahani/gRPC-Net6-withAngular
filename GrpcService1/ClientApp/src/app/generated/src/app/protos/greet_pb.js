// source: src/app/protos/greet.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.greet.ComplexReplyMsg', null, global);
goog.exportSymbol('proto.greet.ComplexRequestMsg', null, global);
goog.exportSymbol('proto.greet.HelloReply', null, global);
goog.exportSymbol('proto.greet.HelloRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.HelloRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.HelloRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.HelloRequest.displayName = 'proto.greet.HelloRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.ComplexRequestMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.ComplexRequestMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.ComplexRequestMsg.displayName = 'proto.greet.ComplexRequestMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.HelloReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.HelloReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.HelloReply.displayName = 'proto.greet.HelloReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.ComplexReplyMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.greet.ComplexReplyMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.ComplexReplyMsg.displayName = 'proto.greet.ComplexReplyMsg';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.HelloRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.HelloRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.HelloRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.HelloRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 100, ""),
    messageid: jspb.Message.getFieldWithDefault(msg, 110, ""),
    msg: (f = msg.getMsg()) && proto.greet.ComplexRequestMsg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.HelloRequest}
 */
proto.greet.HelloRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.HelloRequest;
  return proto.greet.HelloRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.HelloRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.HelloRequest}
 */
proto.greet.HelloRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 100:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 110:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    case 111:
      var value = new proto.greet.ComplexRequestMsg;
      reader.readMessage(value,proto.greet.ComplexRequestMsg.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.HelloRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.HelloRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.HelloRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.HelloRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      100,
      f
    );
  }
  f = message.getMessageid();
  if (f.length > 0) {
    writer.writeString(
      110,
      f
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      111,
      f,
      proto.greet.ComplexRequestMsg.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.greet.HelloRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.HelloRequest} returns this
 */
proto.greet.HelloRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 100;
 * @return {string}
 */
proto.greet.HelloRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.HelloRequest} returns this
 */
proto.greet.HelloRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 100, value);
};


/**
 * optional string messageId = 110;
 * @return {string}
 */
proto.greet.HelloRequest.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 110, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.HelloRequest} returns this
 */
proto.greet.HelloRequest.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3StringField(this, 110, value);
};


/**
 * optional ComplexRequestMsg msg = 111;
 * @return {?proto.greet.ComplexRequestMsg}
 */
proto.greet.HelloRequest.prototype.getMsg = function() {
  return /** @type{?proto.greet.ComplexRequestMsg} */ (
    jspb.Message.getWrapperField(this, proto.greet.ComplexRequestMsg, 111));
};


/**
 * @param {?proto.greet.ComplexRequestMsg|undefined} value
 * @return {!proto.greet.HelloRequest} returns this
*/
proto.greet.HelloRequest.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 111, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greet.HelloRequest} returns this
 */
proto.greet.HelloRequest.prototype.clearMsg = function() {
  return this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greet.HelloRequest.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 111) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.ComplexRequestMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.ComplexRequestMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.ComplexRequestMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.ComplexRequestMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    displayname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    grades: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.ComplexRequestMsg}
 */
proto.greet.ComplexRequestMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.ComplexRequestMsg;
  return proto.greet.ComplexRequestMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.ComplexRequestMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.ComplexRequestMsg}
 */
proto.greet.ComplexRequestMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGrades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.ComplexRequestMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.ComplexRequestMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.ComplexRequestMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.ComplexRequestMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisplayname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGrades();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string displayname = 1;
 * @return {string}
 */
proto.greet.ComplexRequestMsg.prototype.getDisplayname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.ComplexRequestMsg} returns this
 */
proto.greet.ComplexRequestMsg.prototype.setDisplayname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 grades = 2;
 * @return {number}
 */
proto.greet.ComplexRequestMsg.prototype.getGrades = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ComplexRequestMsg} returns this
 */
proto.greet.ComplexRequestMsg.prototype.setGrades = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.HelloReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.HelloReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.HelloReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.HelloReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    replayid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 100, ""),
    messageid: jspb.Message.getFieldWithDefault(msg, 111, ""),
    helloreplymsg: (f = msg.getHelloreplymsg()) && proto.greet.ComplexReplyMsg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.HelloReply}
 */
proto.greet.HelloReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.HelloReply;
  return proto.greet.HelloReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.HelloReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.HelloReply}
 */
proto.greet.HelloReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReplayid(value);
      break;
    case 100:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 111:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    case 2:
      var value = new proto.greet.ComplexReplyMsg;
      reader.readMessage(value,proto.greet.ComplexReplyMsg.deserializeBinaryFromReader);
      msg.setHelloreplymsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.HelloReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.HelloReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.HelloReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.HelloReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplayid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      100,
      f
    );
  }
  f = message.getMessageid();
  if (f.length > 0) {
    writer.writeString(
      111,
      f
    );
  }
  f = message.getHelloreplymsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.greet.ComplexReplyMsg.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 replayId = 1;
 * @return {number}
 */
proto.greet.HelloReply.prototype.getReplayid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.HelloReply} returns this
 */
proto.greet.HelloReply.prototype.setReplayid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 100;
 * @return {string}
 */
proto.greet.HelloReply.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.HelloReply} returns this
 */
proto.greet.HelloReply.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 100, value);
};


/**
 * optional string messageId = 111;
 * @return {string}
 */
proto.greet.HelloReply.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 111, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.HelloReply} returns this
 */
proto.greet.HelloReply.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3StringField(this, 111, value);
};


/**
 * optional ComplexReplyMsg helloReplyMsg = 2;
 * @return {?proto.greet.ComplexReplyMsg}
 */
proto.greet.HelloReply.prototype.getHelloreplymsg = function() {
  return /** @type{?proto.greet.ComplexReplyMsg} */ (
    jspb.Message.getWrapperField(this, proto.greet.ComplexReplyMsg, 2));
};


/**
 * @param {?proto.greet.ComplexReplyMsg|undefined} value
 * @return {!proto.greet.HelloReply} returns this
*/
proto.greet.HelloReply.prototype.setHelloreplymsg = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greet.HelloReply} returns this
 */
proto.greet.HelloReply.prototype.clearHelloreplymsg = function() {
  return this.setHelloreplymsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greet.HelloReply.prototype.hasHelloreplymsg = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.ComplexReplyMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.ComplexReplyMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.ComplexReplyMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.ComplexReplyMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    complexreplymsgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    displaynamereply: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gradesreply: jspb.Message.getFieldWithDefault(msg, 3, 0),
    origin: jspb.Message.getFieldWithDefault(msg, 22, ""),
    correlationid: jspb.Message.getFieldWithDefault(msg, 300, ""),
    sentat: jspb.Message.getFieldWithDefault(msg, 400, 0),
    type: jspb.Message.getFieldWithDefault(msg, 500, ""),
    version: jspb.Message.getFieldWithDefault(msg, 550, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.ComplexReplyMsg}
 */
proto.greet.ComplexReplyMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.ComplexReplyMsg;
  return proto.greet.ComplexReplyMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.ComplexReplyMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.ComplexReplyMsg}
 */
proto.greet.ComplexReplyMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setComplexreplymsgid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplaynamereply(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGradesreply(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrigin(value);
      break;
    case 300:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 400:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSentat(value);
      break;
    case 500:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 550:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.ComplexReplyMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.ComplexReplyMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.ComplexReplyMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.ComplexReplyMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComplexreplymsgid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDisplaynamereply();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGradesreply();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOrigin();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      300,
      f
    );
  }
  f = message.getSentat();
  if (f !== 0) {
    writer.writeInt32(
      400,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      500,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      550,
      f
    );
  }
};


/**
 * optional int32 complexReplyMsgId = 1;
 * @return {number}
 */
proto.greet.ComplexReplyMsg.prototype.getComplexreplymsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ComplexReplyMsg} returns this
 */
proto.greet.ComplexReplyMsg.prototype.setComplexreplymsgid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string displayNameReply = 2;
 * @return {string}
 */
proto.greet.ComplexReplyMsg.prototype.getDisplaynamereply = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.ComplexReplyMsg} returns this
 */
proto.greet.ComplexReplyMsg.prototype.setDisplaynamereply = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 gradesReply = 3;
 * @return {number}
 */
proto.greet.ComplexReplyMsg.prototype.getGradesreply = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ComplexReplyMsg} returns this
 */
proto.greet.ComplexReplyMsg.prototype.setGradesreply = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string origin = 22;
 * @return {string}
 */
proto.greet.ComplexReplyMsg.prototype.getOrigin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.ComplexReplyMsg} returns this
 */
proto.greet.ComplexReplyMsg.prototype.setOrigin = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional string correlationId = 300;
 * @return {string}
 */
proto.greet.ComplexReplyMsg.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 300, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.ComplexReplyMsg} returns this
 */
proto.greet.ComplexReplyMsg.prototype.setCorrelationid = function(value) {
  return jspb.Message.setProto3StringField(this, 300, value);
};


/**
 * optional int32 sentAt = 400;
 * @return {number}
 */
proto.greet.ComplexReplyMsg.prototype.getSentat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 400, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ComplexReplyMsg} returns this
 */
proto.greet.ComplexReplyMsg.prototype.setSentat = function(value) {
  return jspb.Message.setProto3IntField(this, 400, value);
};


/**
 * optional string type = 500;
 * @return {string}
 */
proto.greet.ComplexReplyMsg.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 500, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.ComplexReplyMsg} returns this
 */
proto.greet.ComplexReplyMsg.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 500, value);
};


/**
 * optional int32 version = 550;
 * @return {number}
 */
proto.greet.ComplexReplyMsg.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 550, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ComplexReplyMsg} returns this
 */
proto.greet.ComplexReplyMsg.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 550, value);
};


goog.object.extend(exports, proto.greet);
